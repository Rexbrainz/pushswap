By the end of this read, you would understand an algorithm for pushswap
which I consider to be too good and efficient to not have an article
or blog post written about it.
A senior colleague by name Ilies introduced me to it, which he explained was an
improvement to the popular Turk algorithm. I wished that i could
find a resource that explains this algorithm in detail, to that
he sent me a link to this github account 
https://github.com/mcombeau/push_swap/blob/main/README.md
which as far as I know is the origin of the algorithm. 
The author did a good job in writing brief information for all the 
functions used in the Algorithm. 
But I wanted more, something detailed and direct, i did
not want to dig through all the files and functions which could
be confusing at times to follow and track, and this is the reason
I am writing this, to add to the good job mcombeau did and to help
you access and understand this efficient algorithm easily.

			CASES FOR PUSHSWAP
Just as the Turk, and other algorithms, you need to make cases for 
the numbers of ints to sort.
i.		If the number of ints to sort is 1, you simply return as it is
	already sorted.
ii.		If the number of ints to sort is 2, check if they are sorted, if
	so, you return as the stack is already sorted. If not you simply
	swap and you are good.
iii.	If the number of elements is 3 and not sorted, search for the
	max number in the stack, and send it to the bottom of the stack 
	depending on its position in the stack, if it is the top value in
	the stack, simply rotate the stack, if it is in the middle, 
	reverse rotate the stack, else it is already in the right position.
	Now check if the stack is sorted, if not, swap the first two and 
	you are good.
iv.		If the number of ints to sort is bigger than 3, here comes the
	algorithm in detail.
			Algorithm in detail
First:
	We need to apply indices to all ints, to help us with efficiency.
	We need to push all ints in stack A to B except 3. If the number of
	ints to sort is bigger than 6, we must push to stack B in such a way
	that stack B appears roughly sorted.
Mechanics:
	Apply indices to the integers in Stack A, before pushing to B:
		Imagine the numbers are sorted, (or you may need to sort them if
		you choose) where will a number in Stack A be if sorted, that
		is its index. Basically, write a function that applies 
		indices to each int in the stack. Increment from one to make it
		easy on you to follow.
	Example from the author:
	Stack A contains 3 nodes:
		values:		 0	 9	 2
		indexes:	[1]	[3]	[2]
	
	Push to B:
		If the stack size is bigger than 6.
			Using the applied indices, push integers whose indices are lower
			than or equal to the stack size of A divide by 2. 
			If the current value or int's index is higher than stack size A divide by 2, 
			rotate the stack and check the next, this is done while the number of ints 
			pushed to B is less than or equal to stack size of A divide by 2.
		push everything to B until stack A remains 3.
		This way Stack B ends up looking roughly sorted. Lower indices
		numbers are positioned at the lower half of stack B and the rest at the upper
		half of stack B.
Second:
	Sort 3:
		Sort the 3 ints left in Stack A using the sort three function created
		for three ints.
Third
	Push back to A:
	This is the meat of the algorithm, and this is where you need to pay the most
	attention, our intention is to sort A while we push back to it. By the 
	time we are done, A would be sorted, but depending on the state of 
	stack A, we may need to do a few rotations or reverse-rotations to get
	the smallest int to the top of the stack.
  1:
	Assign positions from 0 to all nodes in A and do the same to the nodes in B.
	that is, if Stack A has 7 ints, the first node is assigned the value 0
	and the last node is assigned the value 6. if we have 10 nodes in B, the
	first has the value 0 and the last has the value 9. This is crucial to our
	algorithm as it allows us find the cost and cheapest move to make.
	Example from the author:
		value:		 3	 0	 9	 1
		index:		[3]	[1]	[4]	[2]
		position:	<0>	<1>	<2>	<3>
	
  2:
	Assign targets. For every node in B, a target node or value in A must be 
	assigned to it. Any int in A where the int in B will be placed
	in front of it to get stack A sorted, is the target to the node in B. 
	This is found by using our previously assigned indices or you could use 
	the values themselves if you choose.
	In essence we are searching for the smallest bigger values in A for all 
	nodes in B, when there are ints in B whose indices are larger than all the
	indices of the ints in stack A, (because we cannot find any ints with bigger
	indices in A for them), we instead find the int with the smallest index in A
	and assign that as targets to these ints with bigger indices in B.
Example from the author:
	Pick the best target position in stack A for the given index of
	an element in stack B. First check if the index of the B element can
	be placed somewhere in between elements in stack A, by checking whether
	there is an element in stack A with a bigger index. If not, find the
	element with the smallest index in A and assign that as the target position.
	--- Example:
		target_pos starts at INT_MAX
		B index: 3
		A contains indexes: 9 4 2 1 0
		9 > 3 && 9 < INT_MAX 	: target_pos updated to 9
		4 > 3 && 4 < 9 			: target pos updated to 4
		2 < 3 && 2 < 4			: no update!
	So target_pos needs to be the position of index 4, since it is
	the closest index.
	--- Example:
		target_pos starts at INT_MAX
		B index: 20
		A contains indexes: 16 4 3
		16 < 20					: no update! target_pos = INT_MAX
		4  < 20					: no update! target_pos = INT_MAX
		3  < 20					: no update! target_pos = INT_MAX
	... target_pos stays at INT MAX, need to switch strategies.
		16 < 20					: target_pos updated to 20
		4  < 20					: target_pos updated to 4
		3  < 20					: target_pos updated to 3
	So target_pos needs to be the position of index 3, since that is that is the end of the stack.
  3:
	Find the best or cheapest move to execute. To do this we need to assign costs to all
	ints in stack A and stack B. This helps us decide what move to make 
	rotate or reverse rotate. The assigned position as mentioned before is helpful
	in assigning the cost, and it is done as so; 
		If the ints are at the upper half of the stack, their costs equal their position, 
		else their costs equals the current stack size minus their position in the stack.
		That is, if the position of each ints in their respective stacks is less than
		or equal to current stack_size divide by 2, the int's position in the stack is it's cost. 
		Else their costs equal current stack_size - thier positions. 
		These assigned costs are their costs to get them to the top of
		their respective stacks.
	Example:
	Stack A					Stack B
	values: 9 4 2 1 0			values: 6 8 3
	pos:    0 1 2 3 4			pos:	0 1 2
	cost:   0 1 2 2 1			cost:	0 1 1
	Notice that it costs 9 nothing to get it to the top of stack A, and same as 6 in stack B,
	it would however cost 1 in stack A 2 moves (reverse rotates) which is it's best move 
	to get it to the top of the stack, any other way to get 1 to the top of the stack would be
	more costly than the current assigned cost 2.
	It would cost 8, 1 move (rotate) to get it to the top of stack B.
	After assigning the costs to all ints in both stacks, we need to decide which move to make.
	Recall that we have assigned to all ints in stack B targets in A. We would now need to sum the
	costs of all B ints with the costs of their targets in A and compare all to find the cheapest
	cost. The cheapest is the move to make.
	Example:
	Stack A					Stack B
	values: 6 8 9				values:  7 4 2 0 
	pos:    0 1 2				pos:	 0 1 2 3
	cost:   0 1 1				cost:	 0 1 2 1
						targets: 8 6 6 6
					targets_cost:    1 0 0 0
					sum of costs:	 1 1 2 1
					cheapest:	1, value: 7, cost: 0, target's cost: 1
	7's target is 8, because 8 is the smallest bigger value in stack A.
	The cheapest move to make as the example shows, could be any of the ints with cost 1 as 
	we do not have any other cost lesser than 1. 
	So the example above, tells us that the best move to make is getting 7 to the top of stack B,
	getting 8 to the top of stack A and pushing 7 to stack A. Notice also that pushing to stack A
	from stack B is not considered when caluculating the costs as it (pushing) applies to every ints in stack B.
  4:
	Execute cheapest move. Now that we have identified the cheapest move to make, it is time to 
	execute the moves. You have the costs to rotate or reverse rotate the stacks. From the 
	example above, we need to push 7 to the top of stack A, but we need to get 8 to the top of 
	stack A first. Since we have the cost to get 8 to the top of stack A, which is 1, and because
	we know that 8's position is less than or equal to stack A's current size divide by 2 which is 1, we know
	we have to rotate stack A to get 8 to the top of stack A. In the same way we know that it costs 0 rotations 
	to get 7 to the top of stack B: this is because 7's positon is 0 and 0 is less than
	or equal to stack B's current size divide by 2. 
	So we execute these moves. We now have 8 and 7 at the top of their respective stacks, 
	so we push 7 to the top of 8 in stack A and update the sizes of both stacks.
	5:
	Repeat 1 to 4 in step Three until stack B is empty.
	6:
	Check if the stack (stack A) is sorted, if not, find the lowest values' index or the value (if you choose)
	in the stack, assign positioning once more to know where it is positioned in the stack. If it is
	positioned at the first half (less than or equal to stack size / 2) of the stack, you rotate the 
	stack by the number of it's position to get it to the top, else you reverse rotate by stack size - its's 
	position times to get it to the top.
	Now it is sorted, because we were sorting A while pushing from B to A.
And that is it to the algorithm, It is very efficient. If after implementing the algorithm and you find that 
you still do not meet the benchmark, go through this again, or check out my implementation or that of the author
and go back to your code to find what you are missing, because I can assure you that when implemented correctly
for 500 ints, average maximum number of moves is about 5000, and for 100 ints way less than 700 moves.
Have fun and good luck!
